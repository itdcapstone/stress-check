<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stress Test</title>
    <!-- Add your CSS styles here -->
</head>
<body>

<div class="quiz-container">
    <h1>Stress Test</h1>
    <form id="quiz-form" action="/test_stress" method="POST">
        {% for question in questions %}
        <div class="question">
            <h2>{{ question.question }}</h2>
            <div class="question-options">
                {% if question.type == 'rating_scale' %}
                    <!-- Render rating scale options -->
                    <!-- Example: 1 to 5 rating scale -->
                    <input type="radio" name="{{ question._id }}" value="1">1
                    <input type="radio" name="{{ question._id }}" value="2">2
                    <input type="radio" name="{{ question._id }}" value="3">3
                    <input type="radio" name="{{ question._id }}" value="4">4
                    <input type="radio" name="{{ question._id }}" value="5">5
                {% elif question.type == 'likert_scale' %}
                    <!-- Render Likert scale options -->
                    <!-- Example: Strongly Disagree to Strongly Agree -->
                    <input type="radio" name="{{ question._id }}" value="Strongly Disagree">Strongly Disagree
                    <input type="radio" name="{{ question._id }}" value="Disagree">Disagree
                    <input type="radio" name="{{ question._id }}" value="Neutral">Neutral
                    <input type="radio" name="{{ question._id }}" value="Agree">Agree
                    <input type="radio" name="{{ question._id }}" value="Strongly Agree">Strongly Agree
                {% elif question.type == 'yes_no' %}
                    <!-- Render Yes or No options -->
                    <input type="radio" name="{{ question._id }}" value="Yes">Yes
                    <input type="radio" name="{{ question._id }}" value="No">No
                {% endif %}
            </div>
        </div>
        {% endfor %}
        <!-- Link styled as a button for submission -->
        <a href="/stress_level" class="submit-btn">Submit</a>
    </form>
</div>

</body>
</html>



@app.route('/question/')
def question():
    # Fetch username from session
    username = session.get('username')

    if username:
        # Fetch assessment data for the user
        question = question_collection.find

        return render_template('question.html', username=username, question=question)
    else:
        # Redirect to login if the user is not logged in
        return redirect(url_for('login'))

        --------------------------------------

        import re
from bson import ObjectId
from cachelib import MongoDbCache
from flask import Flask, render_template, request, redirect, url_for, session
from pymongo import MongoClient
from datetime import datetime
import pymongo 
from werkzeug.security import generate_password_hash



app = Flask(__name__, static_folder='../front-end', template_folder='../front-end')
app.secret_key = 'your_secret_key'  # Set a secret key for session management

# Connect to MongoDB Atlas
client = MongoClient("mongodb+srv://admin:mamapapa22!@cluster0.dwtjqbj.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
db = client.get_database('dbAdmin')
users_collection = db.users
assessment_collection = db.assessment_result
feedback_collection = db.feedback
questionnaires = db.stress_questions


@app.route('/')
def index():
    return render_template('admin/main.html')


#log in

# Route for student login in the root folder
@app.route('/student_login')
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # Check if user exists in MongoDB
        existing_user = users_collection.find_one({'username': username, 'password': password})
        if existing_user:
            # Store username in session
            session['username'] = username
            return redirect(url_for('dashboard', username=username))
        else:
            return 'Invalid username or password'
    return render_template('login.html')  # Render the student login page

# Route for faculty login in the admin folder
@app.route('/faculty_login')
def faculty_login():
    # Add your login logic here for faculty
    return render_template('admin/login.html')  # Render the faculty login page

# Route for admin login in the admin folder
@app.route('/admin_login')
def admin_login():
    # Add your login logic here for admin
    return render_template('admin/login.html')  # Render the admin login page


@app.route('/test_stress/')
def test_stress():
    # Fetch username from session
    username = session.get('username')

    if username:
        # Fetch user management data
        questions = questionnaires.find()
        return render_template('test_stress.html', username=username, questions=questions)
    else:
        # Redirect to login if the user is not logged in
        return redirect(url_for('login'))


#dummy data for assessment
@app.route('/stress_level', methods=['GET', 'POST'])
def stress_level():
    if request.method == 'POST':
        # Get form data
        stress_level = request.form['stress_level']
        stressors = request.form.getlist('stressors')
        recommendations = request.form['recommendations']
        date_tested = datetime.now()
        
        # Fetch username from session
        username = session.get('username')

        # Fetch user_id based on username
        user = users_collection.find_one({'username': username})
        user_id = user['_id']

        # Insert assessment result into the database
        assessment_data = {
            'stress_level': stress_level,
            'stressors': stressors,
            'recommendations': recommendations,
            'user_id': user_id,
            'date_tested': date_tested
        }
        assessment_collection.insert_one(assessment_data)
        
        # Redirect to dashboard after saving assessment
        return redirect(url_for('dashboard', username=username))
    
    # Render the form template for GET requests
    return render_template('stress_level.html')


@app.route('/dashboard/<username>')
def dashboard(username):
    # Fetch user data from the database
    user = users_collection.find_one({'username': username})
    user_id = user['_id']

    # Fetch the latest assessment result for the user
    latest_assessment = assessment_collection.find_one({'user_id': user_id}, sort=[('date_tested', pymongo.DESCENDING)])

    if latest_assessment:
        # Extract the stress level from the latest assessment result
        stress_level = int(latest_assessment['stress_level'])
    else:
        stress_level = None

    # Pass the latest assessment result to the template
    return render_template('dashboard.html', username=username, stress_level=stress_level, latest_assessment=latest_assessment, user=user or "No stress record")



@app.route('/feedback', methods=['GET', 'POST'])
def feedback():

    username = session.get('username')

    if request.method == 'POST':
        # Get form data
        feedback_text = request.form['feedback']

        # Fetch username from session
        username = session.get('username')

        # Fetch user_id based on username
        user = users_collection.find_one({'username': username})
        user_id = user['_id']

        # Fetch name based on user_id
        name = user.get('name', 'Unknown')

        # Insert feedback into the database
        feedback_data = {
            'feedback': feedback_text,
            'user_id': user_id,
            'username': username,
            'name': name,
            'timestamp': datetime.now()
        }
        feedback_collection.insert_one(feedback_data)
        
        # Redirect to a different route after saving feedback
    
    # Render the form template for GET requests
    return render_template('feedback.html', username=username)

@app.route('/recommendation/')
def recommendation():

    username = session.get('username')
   
    # Fetch user data from the database or perform any other necessary actions
    return render_template('recommendation.html', username=username)


@app.route('/analytics/')
def analytics():
    # Fetch username from session
    username = session.get('username')

    if username:
        # Fetch assessment data for the user
        user = users_collection.find_one({'username': username})
        user_id = user['_id']
        assessments = assessment_collection.find({'user_id': user_id})

        return render_template('analytics.html', username=username, assessments=assessments)
    else:
        # Redirect to login if the user is not logged in
        return redirect(url_for('login'))

    
@app.route('/profile/', methods=['GET', 'POST'])
def profile():
    # Fetch user data from the database
    username = session.get('username')
    if username:
        user = users_collection.find_one({'username': username})
        if request.method == 'POST':
            # Update user information in the database
            name = request.form['name']
            email = request.form['email']
            age = int(request.form['age'])  # Convert age to integer
            gender = request.form['gender']
            year_level = request.form['year-level']
            
            # Update the user's information in the database
            users_collection.update_one({'username': username}, {'$set': {'name': name, 'email': email, 'age': age, 'gender': gender, 'year_level': year_level}})
            
            # Redirect to the profile page with a success message
            return render_template('profile.html', username=username, user=user, success_message="Profile successfully updated.")

        # Render the profile template with user information
        return render_template('profile.html', username=username, user=user)
    else:
        # Redirect to login if the user is not logged in
        return redirect(url_for('login'))


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # Check if user exists in MongoDB
        existing_user = users_collection.find_one({'username': username, 'password': password})
        if existing_user:
            # Store username in session
            session['username'] = username
            return redirect(url_for('dashboard', username=username))
        else:
            return 'Invalid username or password'

    # Render the login template for GET requests
    return render_template('login.html')

@app.route('/signin', methods=['POST'])
def signin():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        email = request.form['email']
        gender = request.form['gender']
        year_level = request.form['year_level']
        age = int(request.form['age'])  # Convert age to integer
        
        # Set the role to 'user'
        role = 'user'
    
        # Check if user exists in MongoDB
        existing_user = users_collection.find_one({'username': username})
        if existing_user:
            return 'User already exists!'
        else:
            # Insert new user into the database with the provided role
            new_user = {'username': username, 'password': password, 'role': role, 'email': email, 'gender': gender, 'year_level': year_level, 'age': age}
            users_collection.insert_one(new_user)
            # Store username in session
            session['username'] = username
            return redirect(url_for("login"))

@app.route('/logout')
def logout():
    # Clear session variables
    session.pop('username', None)
    return redirect(url_for('login'))


#admin sideeee----------------------------------------------------------------------------------------------------------------------------------------------------

# @app.route('/dashboard/')
# def home():
#     # Fetch user data from the database or perform any other necessary actions
#     return render_template('admin/dashboard.html')

# @app.route('/questionnaire/')
# def questionnaire():
#     # Fetch user data from the database or perform any other necessary actions
#     return render_template('admin/stress_questions.html')

# @app.route('/data/')
# def data():
#     # Fetch user data from the database or perform any other necessary actions
#     return render_template('admin/data.html')

# @app.route('/feedback/')
# def feedback():
#     # Fetch user data from the database or perform any other necessary actions
#     return render_template('admin/feedback.html')


# # Admin route for admin dashboard
# @app.route('/admin/dashboard/<username>')
# def admin_dashboard(username):
#     # Fetch user data from the database or perform any other necessary actions
#     return render_template('admin/dashboard.html', username=username)


# @app.route('/login', methods=['GET', 'POST'])
# def login():
#     if request.method == 'POST':
#         username = request.form['username']
#         password = request.form['password']
        
#         # Check if user exists in MongoDB
#         existing_user = users_collection.find_one({'username': username, 'password': password})
#         if existing_user:
#             # Store username in session
#             session['username'] = username
#             return redirect(url_for('dashboard', username=username))
#         else:
#             return 'Invalid username or password'

#     # Render the login template for GET requests
#     return render_template('admin/login.html')

# @app.route('/signin', methods=['POST'])
# def signin():
#     if request.method == 'POST':
#         username = request.form['username']
#         password = request.form['password']
    
#         # Check if user exists in MongoDB
#         existing_user = users_collection.find_one({'username': username})
#         if existing_user:
#             return 'User already exists!'
#         else:
#             # Insert new user into the database
#             new_user = {'username': username, 'password': password}
#             users_collection.insert_one(new_user)
#             return redirect(url_for("login"))
        
# @app.route('/management/', methods=['GET', 'POST'])
# def management():
#     # Fetch username from session
#     username = session.get('username')

#     if username:
#         # Fetch user management data
#         users = users_collection.find()

#         if request.method == 'POST':
#             # Handle POST request for editing or deleting users
#             if 'edit_user' in request.form:
#                 # Get the user ID from the form
#                 user_id = request.form['user_id']

#                 # Fetch the user's data from the database
#                 user_data = users_collection.find_one({'_id': ObjectId(user_id)})

#                 # Render the edit user form with the user's data
#                 return render_template('edit_user.html', username=username, user=user_data)
#             elif 'delete_user' in request.form:
#                 # Get the user ID from the form
#                 user_id = request.form['user_id']

#                 # Delete the user from the database
#                 users_collection.delete_one({'_id': ObjectId(user_id)})

#                 # Redirect to the management page with a success message
#                 return redirect(url_for('management', success_message="User successfully deleted."))

#         # Render the management template with user data
#         return render_template('admin/management.html', username=username, users=users)
#     else:
#         # Redirect to login if the user is not logged in
#         return redirect(url_for('login'))

# @app.route('/edit_user/<user_id>', methods=['POST'])
# def edit_user(user_id):
#     username = request.form['username']
#     email = request.form['email']
#     role = request.form['role']
#     password = request.form['password']
#     age = request.form['age']
#     gender = request.form['gender']
#     users_collection.update_one(
#         {'_id': ObjectId(user_id)},
#         {'$set': {'username': username, 'email': email, 'role': role, 'password' : password, 'age' : age, 'gender' : gender}}
#     )
#     return redirect(url_for('management', success_message="User successfully updated."))

# @app.route('/add_user', methods=['GET', 'POST'])
# def add_user():
#     username = request.form.get('username')
#     email = request.form.get('email')
#     role = request.form.get('role')
#     password = request.form.get('password')
#     age = request.form.get('age')
#     gender = request.form.get('gender')
    
#     # Input validation
#     if not username or not email or not role or not password or not age or not gender:
#         return redirect(url_for('management', error_message="All fields are required."))
    
#     if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
#         return redirect(url_for('management', error_message="Invalid email address."))
    
#     try:
#         age = int(age)
#     except ValueError:
#         return redirect(url_for('management', error_message="Age must be a number."))
    
#     # Hash the password
#     hashed_password = generate_password_hash(password)
    
#     # Insert the new user into the database
#     new_user = {
#         'username': username,
#         'email': email,
#         'role': role,
#         'password': hashed_password,
#         'age': age,
#         'gender': gender
#     }
    
#     try:
#         users_collection.insert_one(new_user)
#     except Exception as e:
#         return redirect(url_for('management', error_message=f"An error occurred: {str(e)}"))
    
#     return redirect(url_for('management', success_message="User successfully added."))

# # @app.route('/stress_questions')
# # def stress_questions():
# #     try:
# #         # Retrieve all stress questions from MongoDB
# #         stress_questions = list(stress_questions_collection.find())
# #         app.logger.info("Retrieved stress questions:", stress_questions)  # Log retrieved data
# #         return render_template('stress_questions.html', stress_questions=stress_questions)
# #     except Exception as e:
# #         app.logger.error(f'Error retrieving stress questions: {str(e)}')
# #         return 'An error occurred while retrieving data.'



if __name__ == '__main__':
    app.run(debug=True)